#pragma kernel Contour
#include "/Includes/Table.compute"

static const int numThreads = 8;

struct Triangle {
    float3 a;
    float3 b;
    float3 c;
};

RWStructuredBuffer<float4> vertexBuffer;
AppendStructuredBuffer<Triangle> triangleBuffer;

int resolution;
float surfaceLevel;

float3 Lerp(float4 vertA, float4 vertB) {
    float t = (surfaceLevel - vertA.w) / (vertB.w - vertA.w);
    return vertA.xyz + t * (vertB.xyz - vertA.xyz);
}

int GetVertIndex(int x, int y, int z) {
    int numVertsPerAxis = resolution + 1;
    return (x * numVertsPerAxis + y) * numVertsPerAxis + z;
}

[numthreads(numThreads, numThreads, numThreads)]
void Contour(int3 id : SV_DispatchThreadID) {
    if (id.x >= resolution || id.y >= resolution || id.z >= resolution) {
        return;
    }

    float4 corners[8] = {
        vertexBuffer[GetVertIndex(id.x, id.y, id.z)],
        vertexBuffer[GetVertIndex(id.x, id.y, id.z + 1)],
        vertexBuffer[GetVertIndex(id.x + 1, id.y, id.z + 1)],
        vertexBuffer[GetVertIndex(id.x + 1, id.y, id.z)],
        vertexBuffer[GetVertIndex(id.x, id.y + 1, id.z)],
        vertexBuffer[GetVertIndex(id.x, id.y + 1, id.z + 1)],
        vertexBuffer[GetVertIndex(id.x + 1, id.y + 1, id.z + 1)],
        vertexBuffer[GetVertIndex(id.x + 1, id.y + 1, id.z)]
    };

    // For triangulation lookup
    int cubeIndex = 0;
    if (corners[0].w < surfaceLevel) cubeIndex |= 1;
    if (corners[1].w < surfaceLevel) cubeIndex |= 2;
    if (corners[2].w < surfaceLevel) cubeIndex |= 4;
    if (corners[3].w < surfaceLevel) cubeIndex |= 8;
    if (corners[4].w < surfaceLevel) cubeIndex |= 16;
    if (corners[5].w < surfaceLevel) cubeIndex |= 32;
    if (corners[6].w < surfaceLevel) cubeIndex |= 64;
    if (corners[7].w < surfaceLevel) cubeIndex |= 128;

    int edgeList[] = triangulationTable[cubeIndex];
    for (int i = 0; edgeList[i] != -1; i += 3) {
        int tri1A = vertexPairTable[edgeList[i]][0];
        int tri1B = vertexPairTable[edgeList[i]][1];

        int tri2A = vertexPairTable[edgeList[i + 1]][0];
        int tri2B = vertexPairTable[edgeList[i + 1]][1];

        int tri3A = vertexPairTable[edgeList[i + 2]][0];
        int tri3B = vertexPairTable[edgeList[i + 2]][1];

        Triangle tri;
        tri.a = Lerp(corners[tri1A], corners[tri1B]);
        tri.b = Lerp(corners[tri2A], corners[tri2B]);
        tri.c = Lerp(corners[tri3A], corners[tri3B]);
        triangleBuffer.Append(tri);
    }
}
